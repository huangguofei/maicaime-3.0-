<template>
	<article class="order-list padding" @scroll="onScoll()">
		<section v-for="(item,key) in orderData">
			<header class="padding" @click="orderDateils(item)">
				<div class="pull-left">
					<img src="../../images/list_order_store.png" />
					<span>{{item.supplierName}}</span>
				</div>
				<span class="order-status pull-right">{{item.orderStatusText=='待确认'?'待收货':item.orderStatusText}}</span>
			</header>
			<section class="shop-list padding" @click="orderDateils(item)">
				<div class="shop-item" v-for="(val,key) in item.products">
					<section class="item-left pull-left">
						<p class="commodity-name"><i></i><span>{{val.prodName}}</span></p>
						<p class="price-num"><span>单价:¥{{val.skuPrice}}</span><span>数量:{{val.actualQuantity}}</span></p>
					</section>
					<section class="item-right pull-right">
						<b>¥{{val.totalAmount}}</b>
					</section>
				</div>
				<p class="remark" v-show="item.skuCount>noShowNum">(还有{{item.skuCount-noShowNum}}件食材)</p>
			</section>
			<footer class="padding">
				<p class="pull-left">实付：<span class="price">¥{{item.totalAmount}}</span>
				</p>
				<input type="button" value="付款" class="order-btn pull-right" v-if="item.orderStatusId==20" @click="goSubmitPay(item)" />
				<input type="button" value="确认收货" class="order-btn pull-right" v-else-if="item.orderStatusId==40" @click="goTakeDelivery(item)" />
				<input type="button" value="评价" class="order-btn pull-right order-btns" v-else-if="item.orderStatusId==100" />
				<span v-show="item.orderStatusId==100" class='pull-right'>可获得15积分</span>
			</footer>
		</section>
		<verify-food-list :foodData="foodData" v-show="isShowPage" @hidePage="offPage" @reduce="reduce" @add="add" @confirmReceipt="confirmReceipt" ></verify-food-list>
		<pay-ment :payShow="payShow" :totalAmount="totalAmount" :submitPay="submitPay"></pay-ment>
	</article>
</template>

<script>
	import payMent from 'components/common/payment-type'
	import commonAction from 'actionurl/common/common'
	import orderServer from 'actionurl/order/order'
	import verifyFoodList from 'components/order/verify-food-list'
	export default {
		data() {
			return {
				isRemark: true,
				payShow: false,
				orderId: "",
				totalAmount: 0,
				isLoad:false,
				isShowPage:false,
				foodData:{
					orderStatusId:99,
					products : [],
					totalAmount:0,
					orderId:""
				}
			}
		},
		props: ['orderData', 'noShowNum'],
		created() {
			console.log(JSON.stringify(this.orderData))
		},
		methods: {
			orderDateils(obj) {
				console.log(obj.skuCount)
				this.$router.push({
					name: "order.detail",
					params: {
						id: obj.orderId
					},
					query: {
						status: obj.orderStatusId,
						noShowNum: (obj.skuCount - this.noShowNum)
					}
				})
			},
			goSubmitPay(item) {
				this.payShow = true;
				this.orderId = item.orderId;
				this.totalAmount = item.totalAmount;
			},
			goTakeDelivery(item) {/*确认收货*/
				this.foodData.orderId=item.orderId;
				orderServer.orderFood(this,item.orderId);
				this.isShowPage=true;
			},
			submitPay() {
				commonAction.payByBalance(this);

			},
			onScoll(event) {
				var offsetHeight = event.currentTarget.offsetHeight,
					scrollHeight = event.target.scrollHeight,
					scrollTop = event.target.scrollTop,
					scrollBottom = offsetHeight + scrollTop
				if(scrollTop === 0) {
					if(this.pgNo === 1) {
						return
					}
					this.pgNo--
						this.changePgItems()
					event.target.scrollTop = offsetHeight - 1
				}
				if(scrollBottom === scrollHeight || scrollBottom === scrollHeight + 2) {
					if(this.pgNo == Math.ceil(this.rawItems.length / this.pgSize)) {
						return
					}
					this.pgNo++
						this.changePgItems()
					event.target.scrollTop = 1
				}
			},
			offPage(){
				this.isShowPage=false;
			},
			reduce(item) {
				this.foodData.totalAmount =this.Subtr(this.foodData.totalAmount,item);
			},
			add(item) {
				this.foodData.totalAmount = (this.foodData.totalAmount * 100 + item * 100) / 100;;
			},
			confirmReceipt(){
				orderServer.orderConfirmReceipt(this,this.foodData.orderId);
			},
			Subtr(arg1, arg2) {
				var r1, r2, m, n;
				try {
					r1 = arg1.toString().split(".")[1].length
				} catch(e) {
					r1 = 0
				}
				try {
					r2 = arg2.toString().split(".")[1].length
				} catch(e) {
					r2 = 0
				}
				m = Math.pow(10, Math.max(r1, r2));
				n = (r1 >= r2) ? r1 : r2;
				return((arg1 * m - arg2 * m) / m).toFixed(n);
			}
		},
		components: {
			payMent,
			verifyFoodList
		}
	}
</script>

<style lang="less" scoped>
	@import "../../common/less/config.less";
	.order-list {
		&>section {
			.pxrem(margin-top, 20)
		}
		header {
			background: #fff;
			.rem(50);
			.pxrem(font-size, 32);
			.pxrem(height, 64);
			.pxrem(line-height, 64);
			img {
				/*.pxrem(width,50);*/
				width: @rem;
				border-radius: @rem/2;
				vertical-align: middle;
			}
			.order-status {
				.pxrem(font-size, 28);
				color: @m-c;
			}
		}
		.shop-list {
			background:#F8F8F8;
			.shop-item {
				.pxrem(margin-bottom, 26);
				overflow: auto;
				.item-left {
					.commodity-name {
						color: #151009;
						.pxrem(height, 40);
						.pxrem(line-height, 40);
						.pxrem(font-size, 28);
						.pxrem(margin-bottom, 5);
						i {
							background: @p-p-c;
							display: inline-block;
							.pxrem(width, 12);
							.pxrem(height, 12);
							.pxrem(border-radius, 6);
							.pxrem(margin-right, 6);
						}
					}
					.price-num {
						.pxrem(height, 33);
						.pxrem(line-height, 33);
						color: #999999;
						.pxrem(font-size, 24);
						.pxrem(padding-left, 22);
						span:first-child {
							margin-right: 0.3rem;
						}
					}
				}
				.item-right {
					.pxrem(height, 74);
					.pxrem(line-height, 74);
					b {
						color: #343534;
						.pxrem(font-size, 28);
					}
				}
			}
			.remark {
				color: #343534;
				text-align: center;
				.pxrem(font-size, 24);
			}
		}
		footer {
			.pxrem(height, 64);
			.pxrem(line-height, 64);
			background: #fff;
			.pxrem(font-size, 28);
			p {
				color: #000;
			}
			input {
				.pxrem(width, 150);
				.pxrem(height, 58);
				.pxrem(margin-left, 12);
				text-align: center;
				border: 1px solid @m-c;
				.pxrem(font-size, 28);
			}
			.order-btn {
				background: @m-c;
				color: #fff;
			}
			.order-btns {
				background: #fff;
				color: @m-c;
			}
			
		}
	}
</style>