<!-- 食材列表-图片模式 -->
<template>
<div class="prod-list-pic">
	<scroll 
		:listenScroll="true"
		:listenBeforeScroll = "true"
		@scroll="scroll"
		ref="prodScroll"
		@beforeScrollStart="beforeScrollStart"
		:probeType="3"
		v-if="categoryProdData.length > 0">
		 <div class="con" ref="formList">
			<div class="c-item"  v-for="(c,cIndex) in categoryProdData" ref="prodItem" v-if="!c.delItem">
				<header>
					<span class="category-name">{{c.categoryBO.categoryName}}</span>
				</header>
				<section>
					<div class="p-item" v-for="(p,pIndex) in c.supplierProductItemBOList" v-if="p.skuStatusId != -1">
						<div class="check f-l">
							<i class="p-check" :class="{active:p.active}" @click="selectProd(p)"></i>
						</div>
						<div class="img f-l">
							<img :src="p.skuImage" />
						</div>
						<div class="p-info f-l">
							<p class="name">{{p.skuName}}<img src="../../images/food_xiajia.png" class="prod_down" v-if="p.skuStatusId == 0"  /></p>
							<p class="price-wrap">
								<span class="icon" v-if="p.offerPrice">¥</span>
								<input type="number" class="text-input"  :value="p.offerPrice | offerPriceFilter"  @change="upadteSkuPrice(p, $event)" placeholder="未报价"/>
							</p>
						</div>
						<div class="event f-r">
							
							<a href="javascript:void(0)" class="sold sold-up sold-del" @click="prodStatus(p, -1, c)">删除</a>
							<a href="javascript:void(0)" class="sold sold-up" @click="editorProd(p)">编辑</a>
							<a href="javascript:void(0)" class="sold sold-up" v-if="p.skuStatusId == 0" @click="prodStatus(p, 1)">上架</a>
							<a href="javascript:void(0)" class="sold sold-down" v-if="p.skuStatusId == 1" @click="prodStatus(p, 0)">下架</a>
						</div>
					</div>
				</section>
			</div>
		</div>
	</scroll>
	
</div>
</template>
<script >
import scroll from "components/common/scroll"
import FOODACTION from "actionurl/food/food"
export default{
	data(){
		return {
			probeType : 3,
			itemHeight : [],
			itemBottom : [],
			prodItem : {},
			editShow : false,
			editIndex : {}
		}
	},
	props : ["categoryProdData", "submitEditorPrice"],
	filters : {
		offerPriceFilter: function(value) {
			if(value == 0) {
				value = ""
			} else {
				value = (value * 1).toFixed(2);
			}
			return value;
		}
	},
	components : {
		scroll
	},
	methods : {
		upadteSkuPrice(prod, event) {
			var value = event.target.value;
			if(value != 0 && value != "" && !cJs.checkPrice(value)) {
				cJs.message("输入正确金额！");
				return false;
			}
			prod.offerPrice = value;
			this.submitEditorPrice(prod);
		},
		scroll(pos) {
			var y = Math.abs(pos.y);
			var items = this.itemBottom;
			if(items.length) {
				items.map((item, key) => {
					if((item.bottom - item.height - 30) < y  && y < item.bottom) {
						this.$emit("scrollCategory", key);
					}
				})
			}
		},
		calculateItemHeight() {
			var _that = this;
			setTimeout(() => {
				var items = this.$refs.prodItem;
				if(items) {
					items.map((item, key) => {
						let h = item.clientHeight;
						_that.itemHeight.push(h);
					});
					var heights = this.itemHeight;
					if(heights.length) {
						heights.map((item, key) => {
							var h = 0;
							for(var i = 0; i < key ; i ++) {
								h += heights[i] + 15;
							}
							h += item;
							_that.itemBottom.push({
								height : item,
								bottom : h
							});
						});
					}
				}
			}, 500);
		},
		scrollToElement(index) {
			 this.$refs.prodScroll.scrollToElement(this.$refs.prodItem[index], 0)
		},
		updateScroll() {
			setTimeout(() => {
				this.$refs.prodScroll.refresh();
			}, 500);
		},
		inputFocus() {
			this.$emit("inputFocus");
		},
		inputBlur() {
			this.$emit("inputBlur");
		},
		beforeScrollStart() {
			let inputList = this.$refs.formList.querySelectorAll('.text-input');
	        inputList.forEach((item) => {
	          item.blur()
	        })
		},
		prodStatus(item, status, prods) {
			FOODACTION.updateProdStatus(this, item.productSkuId, status, ()=> {
				item.skuStatusId = status;
				if(status == -1) {
					var num = 0;
					prods.supplierProductItemBOList.forEach((item) => {
						if(item.skuStatusId == -1) {
							++ num;
						}
					});
					if(num == prods.supplierProductItemBOList.length) {
						prods.delItem = true;
					}
				}
			});
		},
		selectProd(item) {
			item.active = item.active ? false : true;
			this.$emit("checkProdNum");
		},
		editorProd(item) {
			this.$router.push({
				name : "food.add",
				query : {
					skuId : item.productSkuId
				}
			});
		}
	}
}
</script>
<style lang="less" scoped>
	@import "../../common/less/config.less";
	.prod-list-pic{
			height:100%;
			.c-item{
				background: #FFF;
				.pxrem(margin-bottom,20);
			}
			header{
				.pxrem(height,70);
				.pxrem(line-height,70);
				.pxrem(font-size,28);
				.prem(-4, 20);
				padding:@prem;
				border-bottom:1px solid #d7d7d7;
			}
			section{
				.prem(-4, 20);
				padding:@prem;
				.p-item{
					.prem(20, -4);
					padding:@prem;
					border-bottom: 1px solid @b-c;
					position: relative;
					.check{
						display: inline-block;
						.pxrem(width, 50);
						.pxrem(height,120);
						text-align: left;
						.p-check{
							display: inline-block;
							.pxrem(width, 32);
							.pxrem(height, 32);
							.pxrem(margin-top, 42);
							border:1px solid #999;
							border-radius:50%;
						}
						.active{
							background: url(../../images/order_check.png) no-repeat;
							background-size: cover;
							border:0;
							.pxrem(width, 34);
							.pxrem(height, 34);
						}
					}
					.f-l{
						float:left;
					}
					.f-r{
						float:right;
					}
					.img{
						.pxrem(width,120);
						.pxrem(height,120);
						border:1px solid #EEEEEE;
						.pxrem(border-radius,5);
						text-align: center;
						display: table-cell;
						vertical-align: middle;
						img{
							max-width:100%;
							max-height:100%;
							vertical-align: middle;
						}
					}
					.p-info{
						.pxrem(padding-left,10);
						.prod_down{
							position: relative;
							.pxrem(width, 60);
							.pxrem(top, -2);
							.pxrem(margin-left, 5);
						}
						.name{
							.pxrem(font-size,28);
							.pxrem(min-height,70);
							.pxrem(width, 400);
							overflow: hidden;
							text-overflow:ellipsis;
						}
						.out-mes{
							display: inline-block;
							.prem(-2, 10);
							padding:@prem;
							.pxrem(line-height,38);
							.pxrem(font-size,18);
							background: @m-c;
							color:#FFF;
							text-align:center;
							.pxrem(border-radius,5);
						}
						.price-wrap{
							position: absolute;
							right:0;
							.pxrem(top,16);
							.pxrem(width,130);
							.pxrem(height,50);
							border:1px solid #d7d7d7;
							.pxrem(border-radius,5);
							.pxrem(line-height,50);
							.icon{
								position: absolute;
								.pxrem(font-size,28);
								.pxrem(left,3);
							}
							input{
								.pxrem(width,120);
								.pxrem(height,40);
								border:0;
								.pxrem(text-indent,20);
								.pxrem(font-size,24);
							}
						}
					}
					.event{
						
						.sold{
							display: inline-block;
							border:1px solid @m-c;
							color:@m-c;
							.pxrem(width,130);
							.pxrem(height,50);
							.pxrem(line-height,52);
							text-align:center;
							.pxrem(font-size,26);
							.pxrem(border-radius,6);
							.pxrem(margin-top,8);
							.pxrem(margin-left,10);
						}
						.sold-del{
							border-color:@ass-c;
							color:@ass-c;
						}
					}
				}
				.p-item:last-child{
					border-bottom:0;
				}
				.p-item:after{
					.clearFloat;
				}
			}
			.no-data{
				text-align: center;
			}
			.fx{
				position: fixed;
				top:0;
				left:0;
				width:100%;
				height:100%;
			}
	}
</style>